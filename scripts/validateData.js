const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¢–æ—Ä—ã
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/validateData.js
 */

const DATA_DIR = path.join(__dirname, '..', 'public', 'data');

class DataValidator {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.stats = {
      books: 0,
      chapters: 0,
      verses: 0,
      words: 0,
      emptyVerses: 0,
      missingTranslations: 0,
      missingCommentaries: 0
    };
  }

  log(level, message, file = null) {
    const entry = { level, message, file, timestamp: new Date().toISOString() };
    if (level === 'error') {
      this.errors.push(entry);
    } else if (level === 'warning') {
      this.warnings.push(entry);
    }
    
    const prefix = level === 'error' ? '‚ùå' : level === 'warning' ? '‚ö†Ô∏è' : '‚úÖ';
    const fileInfo = file ? ` (${file})` : '';
    console.log(`${prefix} ${message}${fileInfo}`);
  }

  validateFileExists(filePath, description) {
    if (!fs.existsSync(filePath)) {
      this.log('error', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${description}`, filePath);
      return false;
    }
    return true;
  }

  validateJsonFile(filePath, description) {
    if (!this.validateFileExists(filePath, description)) {
      return null;
    }

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const data = JSON.parse(content);
      this.log('info', `‚úÖ –í–∞–ª–∏–¥–µ–Ω ${description}`, filePath);
      return data;
    } catch (error) {
      this.log('error', `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`, filePath);
      return null;
    }
  }

  validateBooksIndex() {
    console.log('\nüìö –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–Ω–∏–≥...');
    
    const indexPath = path.join(DATA_DIR, 'metadata', 'books.json');
    const booksIndex = this.validateJsonFile(indexPath, '–∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥');
    
    if (!booksIndex) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (!booksIndex.books || !Array.isArray(booksIndex.books)) {
      this.log('error', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ books –≤ –∏–Ω–¥–µ–∫—Å–µ', indexPath);
      return null;
    }

    this.stats.books = booksIndex.books.length;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    booksIndex.books.forEach(book => {
      const required = ['id', 'english', 'hebrew', 'russian', 'chapters', 'totalVerses'];
      required.forEach(field => {
        if (!book[field]) {
          this.log('error', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ ${field} –≤ –∫–Ω–∏–≥–µ ${book.id || 'unknown'}`, indexPath);
        }
      });
    });

    this.log('info', `–ù–∞–π–¥–µ–Ω–æ ${booksIndex.books.length} –∫–Ω–∏–≥ –≤ –∏–Ω–¥–µ–∫—Å–µ`);
    return booksIndex;
  }

  validateBookMetadata(bookId) {
    const metadataPath = path.join(DATA_DIR, bookId, 'metadata.json');
    const metadata = this.validateJsonFile(metadataPath, `–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ${bookId}`);
    
    if (!metadata) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const required = ['book', 'english', 'hebrew', 'russian', 'totalChapters', 'availableChapters'];
    required.forEach(field => {
      if (!metadata[field]) {
        this.log('error', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ ${field} –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö`, metadataPath);
      }
    });

    return metadata;
  }

  validateChapter(bookId, chapterNum) {
    const chapterPath = path.join(DATA_DIR, bookId, `chapter-${chapterNum.toString().padStart(3, '0')}.json`);
    const chapter = this.validateJsonFile(chapterPath, `${bookId} –≥–ª–∞–≤–∞ ${chapterNum}`);
    
    if (!chapter) return null;

    this.stats.chapters++;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–∞–≤—ã
    if (!chapter.verses || !Array.isArray(chapter.verses)) {
      this.log('error', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ verses –≤ –≥–ª–∞–≤–µ', chapterPath);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏—Ö
    chapter.verses.forEach(verse => {
      this.stats.verses++;
      
      if (!verse.number) {
        this.log('error', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–∏—Ö–∞', chapterPath);
      }

      if (!verse.hebrew || !Array.isArray(verse.hebrew)) {
        this.log('error', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –µ–≤—Ä–µ–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏—Ö–µ ${verse.number}`, chapterPath);
      }

      if (!verse.russian) {
        this.log('warning', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å—Ç–∏—Ö–µ ${verse.number}`, chapterPath);
        this.stats.missingTranslations++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞
      if (!verse.words || !Array.isArray(verse.words)) {
        this.log('warning', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤ –≤ —Å—Ç–∏—Ö–µ ${verse.number}`, chapterPath);
      } else {
        verse.words.forEach((word, index) => {
          this.stats.words++;
          
          if (!word.hebrew) {
            this.log('error', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –µ–≤—Ä–µ–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index + 1} —Å—Ç–∏—Ö–∞ ${verse.number}`, chapterPath);
          }

          if (word.hebrew === '[–¢–†–ï–ë–£–ï–¢–°–Ø_–ó–ê–ü–û–õ–ù–ï–ù–ò–ï]') {
            this.log('warning', `–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index + 1} —Å—Ç–∏—Ö–∞ ${verse.number}`, chapterPath);
            this.stats.emptyVerses++;
          }

          if (!word.translations || word.translations.length === 0) {
            this.log('warning', `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–ª–æ–≤–∞ ${word.hebrew}`, chapterPath);
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      if (!verse.commentaries) {
        this.log('warning', `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å—Ç–∏—Ö–µ ${verse.number}`, chapterPath);
        this.stats.missingCommentaries++;
      } else {
        const commentators = ['rashi', 'ramban', 'ibn_ezra'];
        commentators.forEach(commentator => {
          if (!verse.commentaries[commentator] || verse.commentaries[commentator].includes('[–¢–†–ï–ë–£–ï–¢–°–Ø')) {
            this.log('warning', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${commentator} –≤ —Å—Ç–∏—Ö–µ ${verse.number}`, chapterPath);
          }
        });
      }
    });

    return chapter;
  }

  validateCommentators() {
    console.log('\nüë• –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤...');
    
    const commentatorsPath = path.join(DATA_DIR, 'metadata', 'commentators.json');
    const commentators = this.validateJsonFile(commentatorsPath, '–∏–Ω–¥–µ–∫—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤');
    
    if (!commentators) return null;

    if (!commentators.commentators || !Array.isArray(commentators.commentators)) {
      this.log('error', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ commentators', commentatorsPath);
      return null;
    }

    commentators.commentators.forEach(commentator => {
      const required = ['id', 'name', 'hebrewName', 'fullName', 'years', 'description'];
      required.forEach(field => {
        if (!commentator[field]) {
          this.log('error', `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ ${field} —É –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ ${commentator.id || 'unknown'}`, commentatorsPath);
        }
      });
    });

    this.log('info', `–ù–∞–π–¥–µ–Ω–æ ${commentators.commentators.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤`);
    return commentators;
  }

  validateLexicon() {
    console.log('\nüìñ –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–µ–∫—Å–∏–∫–æ–Ω–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    const newLexiconPath = path.join(DATA_DIR, 'metadata', 'hebrew-lexicon.json');
    const oldLexiconPath = path.join(DATA_DIR, 'hebrew-lexicon.json');
    
    let lexicon = null;
    if (fs.existsSync(newLexiconPath)) {
      lexicon = this.validateJsonFile(newLexiconPath, '–ª–µ–∫—Å–∏–∫–æ–Ω (–Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)');
    } else if (fs.existsSync(oldLexiconPath)) {
      lexicon = this.validateJsonFile(oldLexiconPath, '–ª–µ–∫—Å–∏–∫–æ–Ω (—Å—Ç–∞—Ä–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)');
      this.log('warning', '–õ–µ–∫—Å–∏–∫–æ–Ω –≤ —Å—Ç–∞—Ä–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ metadata/', oldLexiconPath);
    } else {
      this.log('error', '–õ–µ–∫—Å–∏–∫–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π');
      return null;
    }

    if (lexicon) {
      const wordCount = Object.keys(lexicon).length;
      this.log('info', `–ù–∞–π–¥–µ–Ω–æ ${wordCount} —Å–ª–æ–≤ –≤ –ª–µ–∫—Å–∏–∫–æ–Ω–µ`);
    }

    return lexicon;
  }

  validateAll() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥
    const booksIndex = this.validateBooksIndex();
    if (!booksIndex) {
      this.log('error', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥');
      return this.getReport();
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    console.log('\nüìñ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–Ω–∏–≥ –∏ –≥–ª–∞–≤...');
    booksIndex.books.forEach(book => {
      console.log(`\n  üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ ${book.russian} (${book.id})...`);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
      const metadata = this.validateBookMetadata(book.id);
      if (!metadata) return;

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≤—ã
      if (metadata.availableChapters && Array.isArray(metadata.availableChapters)) {
        metadata.availableChapters.forEach(chapterNum => {
          this.validateChapter(book.id, chapterNum);
        });
      }
    });

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    this.validateCommentators();
    this.validateLexicon();

    return this.getReport();
  }

  getReport() {
    console.log('\nüìä –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò\n');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   üìö –ö–Ω–∏–≥: ${this.stats.books}`);
    console.log(`   üìñ –ì–ª–∞–≤: ${this.stats.chapters}`);
    console.log(`   üìù –°—Ç–∏—Ö–æ–≤: ${this.stats.verses}`);
    console.log(`   üí¨ –°–ª–æ–≤: ${this.stats.words}`);
    
    // –ü—Ä–æ–±–ª–µ–º—ã
    console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:');
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.errors.length}`);
    console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.warnings.length}`);
    console.log(`   üìù –ü—É—Å—Ç—ã—Ö —Å—Ç–∏—Ö–æ–≤: ${this.stats.emptyVerses}`);
    console.log(`   üà≥ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${this.stats.missingTranslations}`);
    console.log(`   üí≠ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${this.stats.missingCommentaries}`);

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    const completionRate = this.stats.verses > 0 ? 
      ((this.stats.verses - this.stats.emptyVerses) / this.stats.verses * 100).toFixed(1) : 0;
    
    console.log('\nüéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log(`   üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ${completionRate}%`);
    console.log(`   ‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤: ${this.stats.verses - this.stats.emptyVerses}`);
    console.log(`   üìù –¢—Ä–µ–±—É—é—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ${this.stats.emptyVerses}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (this.errors.length > 0) {
      console.log('   üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
    if (this.stats.emptyVerses > 0) {
      console.log('   üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã —Å—Ç–∏—Ö–æ–≤ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    }
    if (this.stats.missingCommentaries > 0) {
      console.log('   üí≠ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–≤–≤–∏–Ω–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∏–∑—É—á–µ–Ω–∏—è');
    }

    return {
      success: this.errors.length === 0,
      errors: this.errors,
      warnings: this.warnings,
      stats: this.stats,
      completionRate: parseFloat(completionRate)
    };
  }
}

function main() {
  const validator = new DataValidator();
  const report = validator.validateAll();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportPath = path.join(DATA_DIR, 'metadata', 'validation-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2), 'utf8');
  console.log(`\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
  process.exit(report.success ? 0 : 1);
}

if (require.main === module) {
  main();
}

module.exports = { DataValidator };