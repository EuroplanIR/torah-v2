import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞—à–æ—Ç –∏ –≥–ª–∞–≤ –¢–æ—Ä—ã
class TorahStructureGenerator {
  constructor() {
    this.dataDir = path.join(__dirname, '../public/data');
    this.metadataDir = path.join(this.dataDir, 'metadata');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    this.parashas = this.loadJSON(path.join(this.metadataDir, 'parashas.json'));
    this.torahStructure = this.loadJSON(path.join(this.metadataDir, 'torah-structure.json'));
    this.books = this.loadJSON(path.join(this.metadataDir, 'books.json'));
  }

  loadJSON(filePath) {
    try {
      return JSON.parse(fs.readFileSync(filePath, 'utf8'));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
      return null;
    }
  }

  ensureDirectory(dirPath) {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
    }
  }

  createChapterStub(bookId, parashaId, chapterNum, verseCount) {
    const stub = {
      "bookId": bookId,
      "parashaId": parashaId,
      "chapterNumber": chapterNum,
      "totalVerses": verseCount,
      "verses": []
    };

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∏—Ö–æ–≤
    for (let verse = 1; verse <= verseCount; verse++) {
      stub.verses.push({
        "number": verse,
        "words": [
          {
            "hebrew": "◊ì÷∏◊ë÷∏◊®",
            "transliteration": "davar",
            "translations": ["—Å–ª–æ–≤–æ", "–≤–µ—â—å", "–¥–µ–ª–æ"],
            "morphology": {
              "partOfSpeech": "noun",
              "gender": "masculine",
              "number": "singular",
              "root": "◊ì◊ë◊®"
            }
          }
        ]
      });
    }

    return stub;
  }

  createParashaMetadata(bookId, parasha) {
    return {
      "id": parasha.id,
      "bookId": bookId,
      "number": parasha.number,
      "names": {
        "hebrew": parasha.hebrew,
        "russian": parasha.russian,
        "english": parasha.english
      },
      "structure": {
        "startChapter": parasha.startChapter,
        "endChapter": parasha.endChapter,
        "startVerse": parasha.startVerse || 1,
        "endVerse": parasha.endVerse || null
      },
      "content": {
        "theme": parasha.theme,
        "description": parasha.description
      },
      "chapters": [],
      "totalVerses": 0,
      "availableChapters": []
    };
  }

  generateBookStructure(bookId) {
    const bookParashas = this.parashas[bookId];
    if (!bookParashas) {
      console.error(`‚ùå –ü–∞—Ä–∞—à–æ—Ç –¥–ª—è –∫–Ω–∏–≥–∏ ${bookId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      return;
    }

    const bookDir = path.join(this.dataDir, bookId);
    this.ensureDirectory(bookDir);

    console.log(`\nüìñ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫–Ω–∏–≥–∏: ${bookId}`);

    bookParashas.forEach(parasha => {
      const parashaDir = path.join(bookDir, parasha.id);
      this.ensureDirectory(parashaDir);

      // –°–æ–∑–¥–∞–µ–º metadata.json –¥–ª—è –ø–∞—Ä—à–∏
      const parashaMetadata = this.createParashaMetadata(bookId, parasha);
      const metadataPath = path.join(parashaDir, 'metadata.json');
      
      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—à–∏
      const chapters = [];
      for (let chapter = parasha.startChapter; chapter <= parasha.endChapter; chapter++) {
        const chapterData = this.torahStructure.books[bookId]?.chaptersData?.[chapter];
        if (chapterData) {
          chapters.push(chapter);
          parashaMetadata.availableChapters.push(chapter);
          parashaMetadata.totalVerses += chapterData.verses;

          // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≥–ª–∞–≤—ã
          const chapterFileName = `chapter-${chapter.toString().padStart(3, '0')}.json`;
          const chapterPath = path.join(parashaDir, chapterFileName);
          
          if (!fs.existsSync(chapterPath)) {
            const chapterStub = this.createChapterStub(bookId, parasha.id, chapter, chapterData.verses);
            fs.writeFileSync(chapterPath, JSON.stringify(chapterStub, null, 2), 'utf8');
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${parasha.id}/${chapterFileName} (${chapterData.verses} —Å—Ç–∏—Ö–æ–≤)`);
          } else {
            console.log(`   ‚è≠Ô∏è  –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${parasha.id}/${chapterFileName}`);
          }
        }
      }

      parashaMetadata.chapters = chapters;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º metadata.json –ø–∞—Ä—à–∏
      if (!fs.existsSync(metadataPath)) {
        fs.writeFileSync(metadataPath, JSON.stringify(parashaMetadata, null, 2), 'utf8');
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω metadata: ${parasha.id}/metadata.json`);
      } else {
        console.log(`   ‚è≠Ô∏è  Metadata —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${parasha.id}/metadata.json`);
      }
    });
  }

  generateAllBooks() {
    console.log('üèóÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –¢–æ—Ä—ã...\n');

    const bookIds = ['genesis', 'exodus', 'leviticus', 'numbers', 'deuteronomy'];
    
    bookIds.forEach(bookId => {
      this.generateBookStructure(bookId);
    });

    console.log('\nüéâ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∞!');
    this.printStatistics();
  }

  printStatistics() {
    let totalFiles = 0;
    let totalFolders = 0;

    const bookIds = ['genesis', 'exodus', 'leviticus', 'numbers', 'deuteronomy'];
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
    
    bookIds.forEach(bookId => {
      const bookParashas = this.parashas[bookId];
      if (!bookParashas) return;

      let bookFiles = 0;
      let bookFolders = bookParashas.length; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞—à–æ—Ç

      bookParashas.forEach(parasha => {
        bookFiles++; // metadata.json –ø–∞—Ä—à–∏
        
        // –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –≥–ª–∞–≤
        for (let chapter = parasha.startChapter; chapter <= parasha.endChapter; chapter++) {
          bookFiles++;
        }
      });

      console.log(`   üìñ ${bookId}: ${bookFolders} –ø–∞—Ä–∞—à–æ—Ç, ${bookFiles} —Ñ–∞–π–ª–æ–≤`);
      totalFiles += bookFiles;
      totalFolders += bookFolders;
    });

    console.log(`\nüéØ –ò—Ç–æ–≥–æ: ${totalFolders} –ø–∞–ø–æ–∫ –ø–∞—Ä–∞—à–æ—Ç, ${totalFiles} JSON —Ñ–∞–π–ª–æ–≤`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  checkExistingStructure() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...\n');

    const bookIds = ['genesis', 'exodus', 'leviticus', 'numbers', 'deuteronomy'];
    
    bookIds.forEach(bookId => {
      const bookDir = path.join(this.dataDir, bookId);
      const exists = fs.existsSync(bookDir);
      console.log(`üìñ ${bookId}: ${exists ? '‚úÖ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –ø–∞–ø–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      
      if (exists) {
        const parashas = fs.readdirSync(bookDir, { withFileTypes: true })
          .filter(dirent => dirent.isDirectory())
          .map(dirent => dirent.name);
        console.log(`   üìÅ –ü–∞—Ä–∞—à–æ—Ç (${parashas.length}): ${parashas.join(', ')}`);
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
const generator = new TorahStructureGenerator();

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
generator.checkExistingStructure();

// –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
generator.generateAllBooks();