import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã "–≥–ª–∞–≤–∞ -> —Ñ–∞–π–ª" –≤ "—Å—Ç–∏—Ö -> —Ñ–∞–π–ª"
 * –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {parasha}-{chapter:03d}-{verse:03d}.json
 */

const DATA_DIR = path.join(__dirname, '..', 'public', 'data');

async function convertChapterToVerses(bookId, parashaId, chapterNumber) {
  const parashaDir = path.join(DATA_DIR, bookId, parashaId);
  const chapterFilePath = path.join(parashaDir, `chapter-${chapterNumber.toString().padStart(3, '0')}.json`);
  
  console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é ${chapterFilePath}...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–ª–∞–≤—ã
  if (!fs.existsSync(chapterFilePath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª ${chapterFilePath} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é`);
    return;
  }
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≥–ª–∞–≤—ã
    const chapterData = JSON.parse(fs.readFileSync(chapterFilePath, 'utf8'));
    
    if (!chapterData.verses || !Array.isArray(chapterData.verses)) {
      console.log(`‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ ${chapterFilePath} –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ verses`);
      return;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    for (const verse of chapterData.verses) {
      const verseFileName = `${parashaId}-${chapterNumber.toString().padStart(3, '0')}-${verse.number.toString().padStart(3, '0')}.json`;
      const verseFilePath = path.join(parashaDir, verseFileName);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏—Ö–∞
      const verseData = {
        book: chapterData.book || bookId,
        parasha: chapterData.parasha || parashaId,
        chapter: chapterData.chapter || chapterNumber,
        verse: verse.number,
        hebrew: verse.hebrew || [],
        words: verse.words || [],
        commentaries: verse.commentaries || {},
        metadata: {
          lastUpdated: new Date().toISOString(),
          dataVersion: "3.0.0",
          completeness: {
            words: verse.words && verse.words.length > 0 ? "complete" : "partial",
            translations: verse.words && verse.words.some(w => w.pardes) ? "pardes" : "basic",
            commentaries: Object.keys(verse.commentaries || {}).length > 0 ? "complete" : "partial"
          },
          convertedFrom: `chapter-${chapterNumber.toString().padStart(3, '0')}.json`
        }
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å—Ç–∏—Ö–∞
      fs.writeFileSync(verseFilePath, JSON.stringify(verseData, null, 2), 'utf8');
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω ${verseFileName}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const backupPath = path.join(parashaDir, `backup-chapter-${chapterNumber.toString().padStart(3, '0')}.json`);
    fs.copyFileSync(chapterFilePath, backupPath);
    console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: backup-chapter-${chapterNumber.toString().padStart(3, '0')}.json`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${chapterFilePath}:`, error.message);
  }
}

async function convertBook(bookId) {
  const bookDir = path.join(DATA_DIR, bookId);
  
  if (!fs.existsSync(bookDir)) {
    console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${bookDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞—à–æ—Ç
  const parashas = fs.readdirSync(bookDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);
    
  for (const parashaId of parashas) {
    console.log(`\nüìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Ä—à—É: ${bookId}/${parashaId}`);
    
    const parashaDir = path.join(bookDir, parashaId);
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã –≥–ª–∞–≤
    const chapterFiles = fs.readdirSync(parashaDir)
      .filter(file => file.startsWith('chapter-') && file.endsWith('.json'))
      .sort();
      
    for (const chapterFile of chapterFiles) {
      const match = chapterFile.match(/chapter-(\d+)\.json/);
      if (match) {
        const chapterNumber = parseInt(match[1], 10);
        await convertChapterToVerses(bookId, parashaId, chapterNumber);
      }
    }
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü–æ–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ genesis
  await convertBook('genesis');
  
  console.log('\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∏—Ö–æ–≤');
  console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤');
  console.log('3. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ chapter-XXX.json —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
}

main().catch(console.error);