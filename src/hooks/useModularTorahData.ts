import { useState, useEffect, useCallback } from 'react';
import { modularDataLoader } from '@/utils/modularDataLoader';
import { 
  BooksIndex, 
  BookMetadata, 
  ChapterFile, 
  VerseFile,
  Verse,
  CommentatorsIndex,
  HebrewLexicon,
  Parasha 
} from '@/types/torah';

interface UseModularTorahDataReturn {
  // –î–∞–Ω–Ω—ã–µ
  booksIndex: BooksIndex | null;
  currentBookMetadata: BookMetadata | null;
  currentChapter: ChapterFile | null;
  currentVerseFile: VerseFile | null; // –ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞
  currentVerse: Verse | null;
  commentators: CommentatorsIndex | null;
  lexicon: HebrewLexicon | null;
  currentBookParashas: Parasha[];
  currentParasha: Parasha | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean;
  error: string | null;
  progress: {
    loaded: number;
    total: number;
    currentOperation: string;
  };
  
  // –ú–µ—Ç–æ–¥—ã
  loadBook: (bookId: string) => Promise<void>;
  loadChapter: (bookId: string, chapter: number) => Promise<void>;
  loadVerse: (bookId: string, chapter: number, verse: number, parashaId?: string) => Promise<void>; // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
  navigateToVerse: (bookId: string, chapter: number, verse: number, parashaId?: string) => Promise<void>;
  getAvailableChapters: (bookId: string) => Promise<number[]>;
  getAvailableVerses: (bookId: string, chapter: number) => Promise<number[]>;
  getBookParashas: (bookId: string) => Promise<Parasha[]>;
  getParashaByChapter: (bookId: string, chapter: number, verse?: number) => Promise<Parasha | null>;
  getChaptersForParasha: (bookId: string, parashaId: string) => Promise<number[]>;
  searchWord: (hebrew: string) => Promise<any>;
  getWordTranslations: (hebrew: string) => Promise<any[]>;
  clearCache: () => void;
}

export const useModularTorahData = (): UseModularTorahDataReturn => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [booksIndex, setBooksIndex] = useState<BooksIndex | null>(null);
  const [currentBookMetadata, setCurrentBookMetadata] = useState<BookMetadata | null>(null);
  const [currentChapter, setCurrentChapter] = useState<ChapterFile | null>(null);
  const [currentVerseFile, setCurrentVerseFile] = useState<VerseFile | null>(null); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [currentVerse, setCurrentVerse] = useState<Verse | null>(null);
  const [commentators, setCommentators] = useState<CommentatorsIndex | null>(null);
  const [lexicon, setLexicon] = useState<HebrewLexicon | null>(null);
  const [currentBookParashas, setCurrentBookParashas] = useState<Parasha[]>([]);
  const [currentParasha, setCurrentParasha] = useState<Parasha | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState({
    loaded: 0,
    total: 3,
    currentOperation: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...'
  });

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  const initialize = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      setProgress({ loaded: 0, total: 3, currentOperation: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –∫–Ω–∏–≥...' });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥
      const books = await modularDataLoader.loadBooksIndex();
      setBooksIndex(books);
      setProgress({ loaded: 1, total: 3, currentOperation: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤...' });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤
      const commentatorsData = await modularDataLoader.loadCommentators();
      setCommentators(commentatorsData);
      setProgress({ loaded: 2, total: 3, currentOperation: '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–∫—Å–∏–∫–æ–Ω–∞...' });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–∫—Å–∏–∫–æ–Ω
      const lexiconData = await modularDataLoader.loadHebrewLexicon();
      setLexicon(lexiconData);
      setProgress({ loaded: 3, total: 3, currentOperation: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });

      setIsLoading(false);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      setIsLoading(false);
    }
  }, []);

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
   */
  const loadBook = useCallback(async (bookId: string) => {
    try {
      setIsLoading(true);
      setError(null);
      setProgress({ loaded: 0, total: 1, currentOperation: `–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${bookId}...` });

      const metadata = await modularDataLoader.loadBookMetadata(bookId);
      setCurrentBookMetadata(metadata);
      
      setProgress({ loaded: 1, total: 1, currentOperation: `–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ${bookId} –∑–∞–≥—Ä—É–∂–µ–Ω—ã` });
      setIsLoading(false);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏ ${bookId}:`, err);
      setError(err instanceof Error ? err.message : `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏ ${bookId}`);
      setIsLoading(false);
    }
  }, []);

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥–ª–∞–≤—É
   */
  const loadChapter = useCallback(async (bookId: string, chapter: number, parashaId?: string) => {
    try {
      setIsLoading(true);
      setError(null);
      setProgress({ 
        loaded: 0, 
        total: 2, 
        currentOperation: `–ó–∞–≥—Ä—É–∑–∫–∞ ${bookId} –≥–ª–∞–≤—ã ${chapter}...` 
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      if (!currentBookMetadata || currentBookMetadata.book !== bookId) {
        const metadata = await modularDataLoader.loadBookMetadata(bookId);
        setCurrentBookMetadata(metadata);
        setProgress({ 
          loaded: 1, 
          total: 2, 
          currentOperation: `–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤—ã ${chapter}...` 
        });
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤—É
      const chapterData = await modularDataLoader.loadChapter(bookId, chapter, parashaId);
      setCurrentChapter(chapterData);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏—Ö
      setCurrentVerse(null);
      
      setProgress({ 
        loaded: 2, 
        total: 2, 
        currentOperation: `–ì–ª–∞–≤–∞ ${chapter} –∑–∞–≥—Ä—É–∂–µ–Ω–∞` 
      });
      setIsLoading(false);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã ${bookId} ${chapter}:`, err);
      setError(err instanceof Error ? err.message : `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã ${chapter}`);
      setIsLoading(false);
    }
  }, [currentBookMetadata]);

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä—à—É –ø–æ –Ω–æ–º–µ—Ä—É –≥–ª–∞–≤—ã
   */
  const getParashaByChapter = useCallback(async (bookId: string, chapter: number, verse?: number): Promise<Parasha | null> => {
    try {
      return await modularDataLoader.getParashaByChapter(bookId, chapter, verse);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—à–∏ –¥–ª—è ${bookId} –≥–ª–∞–≤—ã ${chapter}:`, err);
      return null;
    }
  }, []);

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–∏—Ö (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
   */
  const loadVerse = useCallback(async (bookId: string, chapter: number, verse: number, parashaId?: string) => {
    try {
      setIsLoading(true);
      setError(null);
      setProgress({ loaded: 0, total: 2, currentOperation: `–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏—Ö–∞ ${chapter}:${verse}...` });

      // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—à—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
      let actualParashaId = parashaId;
      if (!actualParashaId) {
        const parasha = await getParashaByChapter(bookId, chapter);
        if (!parasha) {
          throw new Error(`–ü–∞—Ä—à–∞ –¥–ª—è –≥–ª–∞–≤—ã ${chapter} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        actualParashaId = parasha.id;
      }

      setProgress({ loaded: 1, total: 2, currentOperation: `–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–∞...` });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∏—Ö–∞
      const verseFile = await modularDataLoader.loadVerseFile(bookId, actualParashaId, chapter, verse);
      setCurrentVerseFile(verseFile);

      // –û–±–Ω–æ–≤–ª—è–µ–º currentVerse –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (verseFile.words && verseFile.words.length > 0) {
        const verse_obj = {
          number: verseFile.verse,
          hebrew: verseFile.hebrew,
          russian: verseFile.hebrew.join(' '), // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
          words: verseFile.words,
          commentaries: verseFile.commentaries
        };
        setCurrentVerse(verse_obj);
      }

      setProgress({ loaded: 2, total: 2, currentOperation: `–°—Ç–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω` });
      setIsLoading(false);
    } catch (error) {
      console.error('Error loading verse:', error);
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏—Ö–∞: ${error instanceof Error ? error.message : 'Unknown error'}`);
      setIsLoading(false);
    }
  }, [getParashaByChapter]);

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç–∏—Ö—É (–ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
   */
  const navigateToVerse = useCallback(async (bookId: string, chapter: number, verse: number, parashaId?: string) => {
    try {
      console.log('üîÑ navigateToVerse called:', bookId, chapter, verse, parashaId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ loadVerse –Ω–∞–ø—Ä—è–º—É—é
      await loadVerse(bookId, chapter, verse, parashaId);
      
      console.log('‚úÖ loadVerse completed successfully');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—à—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
      if (!parashaId) {
        const parasha = await modularDataLoader.getParashaByChapter(bookId, chapter, verse);
        setCurrentParasha(parasha);
      }
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Å—Ç–∏—Ö—É ${bookId} ${chapter}:${verse}:`, err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }
  }, [loadVerse]);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≤—ã –¥–ª—è –∫–Ω–∏–≥–∏
   */
  const getAvailableChapters = useCallback(async (bookId: string): Promise<number[]> => {
    try {
      return await modularDataLoader.getAvailableChapters(bookId);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤ –¥–ª—è ${bookId}:`, err);
      return [];
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏—Ö–∏ –¥–ª—è –≥–ª–∞–≤—ã
   */
  const getAvailableVerses = useCallback(async (bookId: string, chapter: number, parashaId?: string): Promise<number[]> => {
    try {
      return await modularDataLoader.getAvailableVerses(bookId, chapter, parashaId);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏—Ö–æ–≤ –¥–ª—è ${bookId} –≥–ª–∞–≤—ã ${chapter}:`, err);
      return [];
    }
  }, []);

  /**
   * –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤ –ª–µ–∫—Å–∏–∫–æ–Ω–µ
   */
  const searchWord = useCallback(async (hebrew: string) => {
    try {
      return await modularDataLoader.searchWord(hebrew);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞:', err);
      return null;
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–ª–æ–≤–∞
   */
  const getWordTranslations = useCallback(async (hebrew: string) => {
    try {
      return await modularDataLoader.getWordTranslations(hebrew);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', err);
      return [
        { meaning: '–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', context: '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', grammar: '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' }
      ];
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞—à–æ—Ç –¥–ª—è –∫–Ω–∏–≥–∏
   */
  const getBookParashas = useCallback(async (bookId: string): Promise<Parasha[]> => {
    try {
      const parashas = await modularDataLoader.getBookParashas(bookId);
      setCurrentBookParashas(parashas);
      return parashas;
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞—à–æ—Ç –¥–ª—è ${bookId}:`, err);
      return [];
    }
  }, []);

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–∞–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—à–∏
   */
  const getChaptersForParasha = useCallback(async (bookId: string, parashaId: string): Promise<number[]> => {
    try {
      return await modularDataLoader.getChaptersForParasha(bookId, parashaId);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤ –¥–ª—è –ø–∞—Ä—à–∏ ${parashaId}:`, err);
      return [];
    }
  }, []);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  const clearCache = useCallback(() => {
    modularDataLoader.clearCache();
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setBooksIndex(null);
    setCurrentBookMetadata(null);
    setCurrentChapter(null);
    setCurrentVerse(null);
    setCommentators(null);
    setLexicon(null);
    setCurrentBookParashas([]);
    setCurrentParasha(null);
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initialize();
  }, [initialize]);



  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    initialize();
  }, [initialize]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    booksIndex,
    currentBookMetadata,
    currentChapter,
    currentVerseFile, // –ù–æ–≤–æ–µ –ø–æ–ª–µ
    currentVerse,
    commentators,
    lexicon,
    currentBookParashas,
    currentParasha,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    error,
    progress,
    
    // –ú–µ—Ç–æ–¥—ã
    loadBook,
    loadChapter: (bookId: string, chapter: number, parashaId?: string) => loadChapter(bookId, chapter, parashaId),
    loadVerse, // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
    navigateToVerse,
    getAvailableChapters,
    getAvailableVerses,
    getBookParashas,
    getParashaByChapter,
    getChaptersForParasha,
    searchWord,
    getWordTranslations,
    clearCache
  };
};